/**
 * SettingsPanel Component
 * Generated by MasterCompletion at 2025-06-13 15:02:33
 */

import React, { useState, useEffect } from 'react';
import { Card, CardHeader, CardTitle, CardContent } from './ui/card';
import { Badge } from './ui/badge';
import { Button } from './ui/button';

interface SettingsPanelProps {
  className?: string;
  onUpdate?: (data: any) => void;
}

const SettingsPanel: React.FC<SettingsPanelProps> = ({ className, onUpdate }) => {
  const [data, setData] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        // Simulate API call
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        const mockData = {
          status: 'active',
          timestamp: new Date().toISOString(),
          metrics: {
            count: Math.floor(Math.random() * 100),
            success_rate: Math.floor(Math.random() * 100)
          }
        };
        
        setData(mockData);
        onUpdate?.(mockData);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'An error occurred');
      } finally {
        setLoading(false);
      }
    };

    fetchData();
    
    // Setup periodic updates
    const interval = setInterval(fetchData, 5000);
    return () => clearInterval(interval);
  }, [onUpdate]);

  if (loading) {
    return (
      <Card className={className}>
        <CardContent className="flex items-center justify-center h-32">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
        </CardContent>
      </Card>
    );
  }

  if (error) {
    return (
      <Card className={className}>
        <CardContent className="flex items-center justify-center h-32">
          <div className="text-red-600">Error: {error}</div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className={className}>
      <CardHeader>
        <CardTitle className="flex items-center justify-between">
          {component_name.replace(/([A-Z])/g, ' $1').trim()}
          <Badge variant={data?.status === 'active' ? 'default' : 'secondary'}>
            {data?.status || 'inactive'}
          </Badge>
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div className="text-center">
              <div className="text-2xl font-bold text-blue-600">
                {data?.metrics?.count || 0}
              </div>
              <div className="text-sm text-gray-600">Count</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-green-600">
                {data?.metrics?.success_rate || 0}%
              </div>
              <div className="text-sm text-gray-600">Success Rate</div>
            </div>
          </div>
          
          <div className="flex justify-between items-center">
            <span className="text-sm text-gray-500">
              Last updated: {data?.timestamp ? new Date(data.timestamp).toLocaleTimeString() : 'Never'}
            </span>
            <Button 
              variant="outline" 
              size="sm"
              onClick={() => window.location.reload()}
            >
              Refresh
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default SettingsPanel;
